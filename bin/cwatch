#!/usr/bin/env ruby
require 'gli'
require 'sqlite3'
require 'fileutils'

require_relative '../lib/util/roi'
require_relative '../lib/util/poll'
require_relative '../lib/util/urls'
require_relative '../lib/util/table'
require_relative '../lib/util/fetch'
require_relative '../lib/util/database'

begin
  # XXX: Remove this begin/rescue before distributing your app
  require 'cwatch'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/cwatch` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/cwatch now"
  exit 64
end

class App
  extend GLI::App

  program_desc 'Offers different Coin Base portfolio functionality to watch coin price or calculate return of investment (ROI)'

  version Cwatch::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Watches the price for the crypto coin on coinbase pro.'
  command :watch do |c|
    c.desc 'The initial fiat investment in the coin'
    c.default_value 1000.0
    c.flag :i

    c.desc 'Coin abbreviation i.e. BTC, ETH, ADA'
    c.default_value 'ADA'
    c.flag :t

    c.desc 'Fiat currency abbreviation i.e. USD, EUR'
    c.default_value 'EUR'
    c.flag :f

    c.action do |global_options, options, args|

      # If you have any errors, just raise them
      # raise "that command made no sense"

      Poll.poll do
        buy = FetchPrice.fetch options[:t], options[:f], CoinBase::BUY
        sell = FetchPrice.fetch options[:t], options[:f], CoinBase::SELL
        spot = FetchPrice.fetch options[:t], options[:f], CoinBase::SPOT

        Table.print buy, sell, spot
      end
    end
  end

  desc 'Add bought coin to the portfolio.'
  command :add do |c|

    c.desc 'The exchange rate paid for the coin.'
    c.flag :r

    c.desc 'Amount of tokens bought.'
    c.flag :a

    c.desc 'Fees paid to coin base.'
    c.flag :c

    c.desc 'Coin abbreviation i.e. BTC, ETH, ADA'
    c.default_value 'ADA'
    c.flag :t

    c.desc 'Fiat currency abbreviation i.e. USD, EUR'
    c.default_value 'EUR'
    c.flag :f

    c.action do |global_options, options, args|
      @db.add options
      coins = @db.all
      Table.render_coins coins
    end
  end

  desc 'Calculate ROI for a token against current price and portfolio.'
  command :roi do |c|

    c.desc 'Coin abbreviation i.e. BTC, ETH, ADA'
    c.default_value 'ADA'
    c.flag :t

    c.desc 'Fiat currency abbreviation i.e. USD, EUR'
    c.default_value 'EUR'
    c.flag :f

    c.desc 'Refresh ROI calculation every 60s'
    c.default_value false
    c.switch :p

    c.desc 'Refresh ROI rate'
    c.default_value 60
    c.switch :r

    c.action do |global_options, options, args|
      fiat = options[:f]
      token = options[:t]
      poll = options[:p]
      delay = options[:r]

      owned_coins = @db.all_for token

      if poll
        Poll.poll delay do
          calculation_list = ROI.calculate_for token, fiat, owned_coins
          Table.render_roi calculation_list
        end
      else
        roi_list = ROI.calculate_for token, fiat, owned_coins
        Table.render_roi roi_list
      end
    end
  end

  pre do |global, command, options, args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    @db = Database.new
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  ensure
    @db.dispose if @db
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
  ensure
    @db.dispose if @db
    true
  end
end

exit App.run(ARGV)
